[{"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/index.js":"1","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/App.js":"2","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Home.js":"3","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/Dashboard.js":"4","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/Navbar.js":"5","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/RouteWithSubRoutes.js":"6","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/routes.js":"7","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Login/Login.js":"8","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Register/Register.js":"9","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Landing/Landing.js":"10","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/reportWebVitals.js":"11","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/utils.js/PrivateRoute.js":"12","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/index.js":"13","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/store.js":"14","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/authReducer.js":"15","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/types.js":"16","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/uiReducer.js":"17","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/actions/authActions.js":"18","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/utils.js/config.js":"19","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/theme.js":"20","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/AppBarAndDrawer/AppBarAndDrawer.js":"21","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/Theme/PalettePicker.js":"22","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/Theme/colors.js":"23","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/helpers.ts":"24","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/dashboard.routes.ts":"25","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Staff/Staff.js":"26","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/CompanyMenu/CompanyMenu.js":"27","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Orders/Orders.js":"28","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Profile/Profile.js":"29","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Metric/Metric.js":"30","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/Main.js":"31","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/Content/Content.js":"32"},{"size":757,"mtime":1613556585920,"results":"33","hashOfConfig":"34"},{"size":1854,"mtime":1614166639214,"results":"35","hashOfConfig":"34"},{"size":781,"mtime":1606319971776,"results":"36","hashOfConfig":"37"},{"size":1164,"mtime":1614199516014,"results":"38","hashOfConfig":"34"},{"size":885,"mtime":1606319984480,"results":"39","hashOfConfig":"34"},{"size":454,"mtime":1614199618830,"results":"40","hashOfConfig":"34"},{"size":619,"mtime":1606308316169,"results":"41","hashOfConfig":"37"},{"size":8244,"mtime":1613647293889,"results":"42","hashOfConfig":"34"},{"size":12033,"mtime":1613655034065,"results":"43","hashOfConfig":"34"},{"size":855,"mtime":1607510280016,"results":"44","hashOfConfig":"34"},{"size":362,"mtime":1606296899356,"results":"45","hashOfConfig":"34"},{"size":621,"mtime":1614166937590,"results":"46","hashOfConfig":"34"},{"size":161,"mtime":1607594448215,"results":"47","hashOfConfig":"34"},{"size":389,"mtime":1607120432898,"results":"48","hashOfConfig":"34"},{"size":682,"mtime":1608211716993,"results":"49","hashOfConfig":"34"},{"size":559,"mtime":1607614206703,"results":"50","hashOfConfig":"34"},{"size":703,"mtime":1613655370787,"results":"51","hashOfConfig":"34"},{"size":1540,"mtime":1613828035196,"results":"52","hashOfConfig":"34"},{"size":338,"mtime":1607507293148,"results":"53","hashOfConfig":"34"},{"size":726,"mtime":1613645974975,"results":"54","hashOfConfig":"34"},{"size":7304,"mtime":1614426548659,"results":"55","hashOfConfig":"34"},{"size":918,"mtime":1613840522490,"results":"56","hashOfConfig":"34"},{"size":464,"mtime":1613840522494,"results":"57","hashOfConfig":"34"},{"size":520,"mtime":1614169501425,"results":"58","hashOfConfig":"34"},{"size":1455,"mtime":1614199433450,"results":"59","hashOfConfig":"34"},{"size":18699,"mtime":1614432076611,"results":"60","hashOfConfig":"34"},{"size":108,"mtime":1613829253179,"results":"61","hashOfConfig":"34"},{"size":104,"mtime":1614176602434,"results":"62","hashOfConfig":"34"},{"size":107,"mtime":1614176610066,"results":"63","hashOfConfig":"34"},{"size":223,"mtime":1614270639086,"results":"64","hashOfConfig":"34"},{"size":869,"mtime":1614197320828,"results":"65","hashOfConfig":"34"},{"size":1004,"mtime":1614269934400,"results":"66","hashOfConfig":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"wph79w",{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vxspiw",{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"69"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"69"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"69"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"124"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"69"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/index.js",[],["144","145"],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/App.js",["146","147","148","149","150","151"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PrivateRoute from \"./utils.js/PrivateRoute\";\nimport jwtDecode from \"jwt-decode\";\n// utils\nimport config from \"./utils.js/config\";\n// MUi stuff\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport { CssBaseline } from \"@material-ui/core\";\n\n// components\nimport Navbar from \"./components/layout/Navbar\";\nimport Dashboard from \"./components/pages/Dashboard/Dashboard\";\n// pages\nimport Landing from \"./components/pages/Landing/Landing\";\nimport Login from \"./components/pages/Login/Login\";\nimport Register from \"./components/pages/Register/Register\";\n\nimport axios from \"axios\";\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n// decidin on the backend service to use\naxios.defaults.baseURL = config[\"BACKEND_SERVICE\"];\n\n// checking for jwt\nlet authenticated;\nif (localStorage.token) {\n    const decodeToken = jwtDecode(localStorage.token);\n    if (decodeToken.exp * 1000 < Date.now()) {\n        authenticated = false;\n        // window.location.href = \"/login\";\n    } else {\n        authenticated = true;\n    }\n}\n\nfunction App() {\n    return (\n        <>\n            <div>\n                <Switch>\n                    <Route exact path=\"/\" component={Login} />\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/register\" component={Register} />\n                    <PrivateRoute\n                        exact\n                        path=\"/dashboard\"\n                        component={Dashboard}\n                    />\n                </Switch>\n            </div>\n            <CssBaseline />\n        </>\n    );\n}\n\nexport default App;\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Home.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/Dashboard.js",["152","153"],"import React, { useState } from \"react\";\n// components\nimport Main from \"./Main\";\nimport { BrowserRouter, withRouter } from \"react-router-dom\";\nimport AppBarAndDrawer from \"../../layout/AppBarAndDrawer/AppBarAndDrawer\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { useTheme } from \"../../../theme\";\n// helpers\nimport getDashboardRoutes from \"./helpers\";\n\n//redux\nimport { connect } from \"react-redux\";\n\nfunction Dashboard(props) {\n    const [currentTheme, setCurrentTheme] = useTheme();\n\n    //get user role\n    const {\n        user: { role },\n    } = props;\n\n    return (\n        <ThemeProvider theme={currentTheme}>\n            <BrowserRouter>\n                <AppBarAndDrawer\n                    currentTheme={currentTheme}\n                    setCurrentTheme={setCurrentTheme}\n                    routes={getDashboardRoutes(role)}\n                />\n\n                <Main routes={getDashboardRoutes(role)} />\n            </BrowserRouter>\n            {/* main app will be here */}\n        </ThemeProvider>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.auth.user,\n});\n\nexport default connect(mapStateToProps)(Dashboard);\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/Navbar.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/RouteWithSubRoutes.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/routes.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Login/Login.js",["154","155"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Appicon from \"../../../images/logo.png\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\n//mui stuff\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { createStyles } from \"@material-ui/core/styles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\n// redux\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../../redux/actions/authActions\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://wissensof.com/\">\n                Wissenpos\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nconst styles = createStyles((theme) => ({\n    root: {\n        height: \"100vh\",\n    },\n    image: {\n        backgroundRepeat: \"no-repeat\",\n        backgroundColor:\n            theme.palette.type === \"dark\"\n                ? theme.palette.grey[900]\n                : theme.palette.grey[50],\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        width: \"100%\",\n        paddingTop: \"40px\",\n    },\n    paper: {\n        margin: theme.spacing(8, 8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    progress: {\n        position: \"absolute\",\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport class Login extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            email: \"\",\n            password: \"\",\n            errors: {},\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const userData = {\n            email: this.state.email,\n            password: this.state.password,\n        };\n\n        this.props.loginUser(userData, this.props.history);\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    render() {\n        const {\n            classes,\n            ui: { loading },\n        } = this.props;\n        const { errors } = this.state;\n\n        return (\n            <Grid container component=\"main\" className={classes.root}>\n                <CssBaseline />\n                <Grid container justify=\"center\" className={classes.image}>\n                    <Grid\n                        item\n                        xs={12}\n                        sm={8}\n                        md={5}\n                        component={Paper}\n                        // direction=\"row\"\n                        elevation={6}\n                        square\n                    >\n                        <Grid className={classes.paper}>\n                            <Avatar className={classes.avatar}>\n                                <LockOutlinedIcon />\n                            </Avatar>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Login\n                            </Typography>\n                            <form\n                                className={classes.form}\n                                noValidate\n                                onSubmit={this.handleSubmit}\n                            >\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.handleChange}\n                                    helperText={errors.message}\n                                    autoComplete=\"email\"\n                                    autoFocus\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.password}\n                                    onChange={this.handleChange}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            value=\"remember\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Remember me\"\n                                />\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    className={classes.submit}\n                                    type=\"submit\"\n                                >\n                                    Sign In\n                                    {loading && (\n                                        <CircularProgress\n                                            size={30}\n                                            className={classes.progress}\n                                        />\n                                    )}\n                                </Button>\n                                <Grid container>\n                                    <Grid item xs>\n                                        <Link href=\"#\" variant=\"body2\">\n                                            Forgot password?\n                                        </Link>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link href=\"/register\" variant=\"body2\">\n                                            {\"Don't have an account? Sign Up\"}\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                                <Box mt={5}>\n                                    <Copyright />\n                                </Box>\n                            </form>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    ui: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    ui: state.ui,\n});\n\nconst mapActionsToProps = {\n    loginUser,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(withStyles(styles)(Login));\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Register/Register.js",["156","157"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\n//mui stuff\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { createStyles } from \"@material-ui/core/styles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\n// redux\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../../redux/actions/authActions\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://wissensof.com/\">\n                Wissenpos\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nconst styles = createStyles((theme) => ({\n    root: {\n        height: \"100vh\",\n    },\n    image: {\n        backgroundRepeat: \"no-repeat\",\n        backgroundColor:\n            theme.palette.type === \"dark\"\n                ? theme.palette.grey[900]\n                : theme.palette.grey[50],\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        width: \"100%\",\n        paddingTop: \"40px\",\n    },\n    paper: {\n        margin: theme.spacing(8, 8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    progress: {\n        position: \"absolute\",\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n            user: {\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                phoneNumber: \"\",\n                password: \"\",\n                confirmPassword: \"\",\n                role: \"owner\",\n            },\n            loading: false,\n            errors: {},\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.user.password !== this.state.user.confirmPassword) {\n            // raise form error for the fields\n            // return\n            this.setState({\n                errors: \"Passwords must match\",\n            });\n\n            return false;\n        }\n\n        this.props.registerUser(this.state.user, this.props.history);\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            user: { ...this.state.user, [e.target.name]: e.target.value },\n        });\n    };\n\n    render() {\n        const {\n            classes,\n            ui: { loading, errors },\n        } = this.props;\n\n        return (\n            <Grid container component=\"main\" className={classes.root}>\n                <CssBaseline />\n                <Grid container justify=\"center\" className={classes.image}>\n                    <Grid\n                        item\n                        xs={12}\n                        sm={8}\n                        md={5}\n                        component={Paper}\n                        // direction=\"row\"\n                        elevation={6}\n                        square\n                    >\n                        <Grid className={classes.paper}>\n                            <Avatar className={classes.avatar}>\n                                <LockOutlinedIcon />\n                            </Avatar>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Register\n                            </Typography>\n                            <form\n                                className={classes.form}\n                                noValidate\n                                onSubmit={this.handleSubmit}\n                            >\n                                <TextField\n                                    id=\"firstName\"\n                                    margin=\"normal\"\n                                    name=\"firstName\"\n                                    type=\"text\"\n                                    label=\"First Name\"\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.user.firstName}\n                                    onChange={this.handleChange}\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                />\n\n                                <TextField\n                                    id=\"lastName\"\n                                    margin=\"normal\"\n                                    name=\"lastName\"\n                                    type=\"text\"\n                                    label=\"Last Name\"\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.user.lastName}\n                                    onChange={this.handleChange}\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                />\n\n                                <TextField\n                                    id=\"phoneNumber\"\n                                    margin=\"normal\"\n                                    name=\"phoneNumber\"\n                                    type=\"text\"\n                                    label=\"PhoneNumber\"\n                                    inputProps={{\n                                        minLength: 10,\n                                        maxLength: 15,\n                                    }}\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.user.phoneNumber}\n                                    onChange={this.handleChange}\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                />\n\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    value={this.state.user.email}\n                                    onChange={this.handleChange}\n                                    helperText={errors.message}\n                                    autoComplete=\"email\"\n                                    autoFocus\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    inputProps={{ minLength: 8 }}\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.user.password}\n                                    onChange={this.handleChange}\n                                />\n\n                                <TextField\n                                    id=\"confirmPassword\"\n                                    name=\"confirmPassword\"\n                                    type=\"password\"\n                                    label=\"Confirm Password\"\n                                    inputProps={{ minLength: 8 }}\n                                    helperText={errors.message}\n                                    error={errors.message ? true : false}\n                                    value={this.state.user.confirmPassword}\n                                    onChange={this.handleChange}\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            value=\"remember\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Remember me\"\n                                />\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    className={classes.submit}\n                                    type=\"submit\"\n                                >\n                                    Register\n                                    {loading && (\n                                        <CircularProgress\n                                            size={30}\n                                            className={classes.progress}\n                                        />\n                                    )}\n                                </Button>\n                                <Grid container>\n                                    <Grid item xs>\n                                        <Link href=\"#\" variant=\"body2\">\n                                            Forgot password?\n                                        </Link>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link href=\"/login\" variant=\"body2\">\n                                            {\"Already have an account? Log in\"}\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                                <Box mt={5}>\n                                    <Copyright />\n                                </Box>\n                            </form>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nRegister.propTypes = {\n    classes: PropTypes.object.isRequired,\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    ui: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    ui: state.ui,\n});\n\nconst mapActionsToProps = {\n    registerUser,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(withStyles(styles)(Register));\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Landing/Landing.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/reportWebVitals.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/utils.js/PrivateRoute.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/index.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/store.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/authReducer.js",["158"],"import {\n    SET_USER,\n    LOADING_UI,\n    SET_AUTHENTICATED,\n    SET_UAUTHENTICATED,\n} from \"../types\";\n\nconst initialState = {\n    user: null,\n    authenticated: false,\n};\n\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTHENTICATED:\n            return {\n                ...state,\n                authenticated: true,\n            };\n        case SET_UAUTHENTICATED:\n            return initialState;\n        case SET_USER:\n            return {\n                ...state,\n                authenticated: true,\n                user: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default auth;\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/types.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/reducers/uiReducer.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/redux/actions/authActions.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/utils.js/config.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/theme.js",["159"],"import React, { useState } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { blue, blueGrey } from \"@material-ui/core/colors\";\n\nconst defaultTheme = {\n    palette: {\n        primary: blue,\n        secondary: blueGrey, //ss,\n        //type: \"dark\",\n    },\n    typography: {\n        fontFamily: \"'Oxanium', cursive;\",\n    },\n    status: {\n        danger: \"orange\",\n    },\n};\n\nexport function useTheme() {\n    const [currentTheme, setCurrentTheme] = useState({\n        palette: {\n            primary: blue,\n            secondary: blueGrey,\n        },\n    });\n    const muiTheme = createMuiTheme({\n        ...defaultTheme,\n        ...currentTheme,\n    });\n    return [muiTheme, setCurrentTheme];\n}\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/AppBarAndDrawer/AppBarAndDrawer.js",["160","161"],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/Theme/PalettePicker.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/Theme/colors.js",["162"],"import {\r\n  red,\r\n  pink,\r\n  purple,\r\n  deepPurple,\r\n  indigo,\r\n  blue,\r\n  lightBlue,\r\n  cyan,\r\n  teal,\r\n  green,\r\n  lightGreen,\r\n  lime,\r\n  yellow,\r\n  amber,\r\n  deepOrange,\r\n  brown,\r\n  grey,\r\n  blueGrey,\r\n} from \"@material-ui/core/colors\";\r\n\r\nexport default [\r\n  red,\r\n  pink,\r\n  purple,\r\n  deepPurple,\r\n  indigo,\r\n  blue,\r\n  lightBlue,\r\n  cyan,\r\n  teal,\r\n  green,\r\n  lightGreen,\r\n  lime,\r\n  yellow,\r\n  amber,\r\n  deepOrange,\r\n  brown,\r\n  grey,\r\n  blueGrey,\r\n];\r\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/helpers.ts",["163"],"import dashboardRoutes, {\n\tcompanyRoutes\n} from './dashboard.routes';\n\nexport interface CompanyResponse{\n    name:string;\n    owner_id: number;\n}\n\nexport interface UserResponse {\n\tid: number;\n\tfirst_name: string;\n\tlast_name: string;\n\temail: string;\n\trole: string;\n    company?:CompanyResponse\n}\n\n\nexport default function getDashboardRoutes(role:string):any[]{\n\t// TODO make sure not other user type accesses this\t\n    if(role == \"owner\"){\n        return companyRoutes;\n    }else{\n        return dashboardRoutes;\n    }\n}\n",["164","165"],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/dashboard.routes.ts",["166"],"// admin routes\n\n// owner routes\n\n// staff routes\n\n// mui stuff\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport BusinessIcon from \"@material-ui/icons/Business\";\nimport DataUsageIcon from \"@material-ui/icons/DataUsage\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\";\n\n//pages company\nimport Staff from \"../Company/Staff/Staff\";\nimport CompanyMenu from \"../Company/CompanyMenu/CompanyMenu\";\nimport Orders from \"../Company/Orders/Orders\";\nimport Profile from \"../Company/Profile/Profile\";\nimport Metric from \"../Company/Metric/Metric\";\n\nconst dashboardRoutes = [\n    {\n        path: \"/\",\n    },\n];\n\nexport const companyRoutes = [\n    {\n        path: \"/dashboard/metrics\",\n        component: Metric,\n        text: \"metrics\",\n        icon: DataUsageIcon,\n    },\n    {\n        path: \"/dashboard/staff-management\",\n        component: Staff,\n        text: \"staff-management\",\n        icon: GroupIcon,\n    },\n    {\n        path: \"/dashboard/menu\",\n        component: CompanyMenu,\n        text: \"menu\",\n        icon: BusinessIcon,\n    },\n    {\n        path: \"/dashboard/orders\",\n        component: Orders,\n        text: \"orders\",\n        icon: ShoppingBasketIcon,\n    },\n    {\n        path: \"/dashboard/profile\",\n        component: Profile,\n        text: \"profile\",\n        icon: PersonIcon,\n    },\n];\n\nexport default dashboardRoutes;\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Staff/Staff.js",["167","168","169"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { add, remove, selectPeople, selectLoading } from \"./peopleSlice\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport PropTypes from \"prop-types\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport Content from \"../Dashboard/Content\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport PeopleDialog from \"../People/PeopleDialog\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport DeletePeopleDialog from \"../People/DeletePeopleDialog\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { SummaryCard } from \"../People/Driver\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {\n        id: \"avatar\",\n        numeric: false,\n        disablePadding: true,\n        label: \"\",\n    },\n    {\n        id: \"name\",\n        numeric: false,\n        disablePadding: true,\n        label: \"Name\",\n    },\n    { id: \"id\", numeric: true, disablePadding: false, label: \"ID\" },\n    { id: \"email\", numeric: false, disablePadding: false, label: \"Email\" },\n    {\n        id: \"phoneNumber\",\n        numeric: false,\n        disablePadding: false,\n        label: \"PhoneNumber\",\n    },\n];\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all desserts\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n    },\n    paper: {\n        width: \"100%\",\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: \"rect(0 0 0 0)\",\n        height: 1,\n        margin: -1,\n        overflow: \"hidden\",\n        padding: 0,\n        position: \"absolute\",\n        top: 20,\n        width: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    deleteButton: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport default function People() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"calories\");\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(25);\n    const rows = useSelector(selectPeople);\n    const loading = useSelector(selectLoading);\n    const error = false;\n    // todo with snacks\n    const [snackOpen, setSnackOpen] = React.useState(false);\n    const dispatch = useDispatch();\n\n    let history = useHistory();\n\n    if (loading) {\n        return (\n            <Content>\n                <CircularProgress />\n            </Content>\n        );\n    }\n\n    if (error) return `Error! ${error.message}`;\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const selectTableRow = (id) => {\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n    const snackClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setSnackOpen(false);\n    };\n\n    return (\n        <Content>\n            <Snackbar\n                open={snackOpen}\n                autoHideDuration={2000}\n                onClose={snackClose}\n            >\n                <Alert onClose={snackClose} severity=\"success\">\n                    {snackOpen}\n                </Alert>\n            </Snackbar>\n            <div className={classes.root}>\n                <Toolbar>\n                    <div edge=\"start\" className={classes.grow} />\n                    <PeopleDialog\n                        edge=\"end\"\n                        onSave={() => {\n                            setSnackOpen(\"Person added\");\n                        }}\n                        render={(open) => (\n                            <Button\n                                edge=\"end\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                startIcon={<AddIcon />}\n                                onClick={open}\n                            >\n                                Add Person\n                            </Button>\n                        )}\n                    />\n                    {selected.length > 0 && (\n                        <Tooltip title={\"Delete\"}>\n                            <DeletePeopleDialog\n                                ids={selected}\n                                onSave={() => {\n                                    dispatch(remove(selected));\n\n                                    setSnackOpen(\n                                        `${selected.length} Driver${\n                                            selected.length > 1 ? \"s\" : \"\"\n                                        } Deleted`\n                                    );\n                                    setSelected([]);\n                                }}\n                                render={(open) => (\n                                    <Button\n                                        className={classes.deleteButton}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon />}\n                                        onClick={open}\n                                    >\n                                        {\" \"}\n                                        Delete {selected.length} selected\n                                    </Button>\n                                )}\n                            />\n                        </Tooltip>\n                    )}\n                </Toolbar>\n                <SummaryCard\n                    title={\"Drivers\"}\n                    value={\n                        <>\n                            <TableContainer>\n                                <Table\n                                    className={classes.table}\n                                    aria-labelledby=\"tableTitle\"\n                                    size={\"small\"}\n                                    aria-label=\"enhanced table\"\n                                >\n                                    <EnhancedTableHead\n                                        classes={classes}\n                                        numSelected={selected.length}\n                                        order={order}\n                                        orderBy={orderBy}\n                                        onSelectAllClick={handleSelectAllClick}\n                                        onRequestSort={handleRequestSort}\n                                        rowCount={rows.length}\n                                    />\n                                    <TableBody>\n                                        {stableSort(\n                                            rows,\n                                            getComparator(order, orderBy)\n                                        )\n                                            .slice(\n                                                page * rowsPerPage,\n                                                page * rowsPerPage + rowsPerPage\n                                            )\n                                            .map((row, index) => {\n                                                const isItemSelected = isSelected(\n                                                    row.id\n                                                );\n                                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                                return (\n                                                    <TableRow\n                                                        hover\n                                                        role=\"checkbox\"\n                                                        aria-checked={\n                                                            isItemSelected\n                                                        }\n                                                        tabIndex={-1}\n                                                        onClick={(e) => {\n                                                            if (\n                                                                e.target\n                                                                    .type ===\n                                                                    \"checkbox\" ||\n                                                                e.target.className.indexOf(\n                                                                    \"Checkbox\"\n                                                                ) > 0\n                                                            ) {\n                                                                return;\n                                                            }\n                                                            history.push(\n                                                                `/people/${row.id}`\n                                                            );\n                                                        }}\n                                                        key={`person-${row.id}`}\n                                                        selected={\n                                                            isItemSelected\n                                                        }\n                                                        style={{\n                                                            cursor: \"pointer\",\n                                                        }}\n                                                    >\n                                                        <TableCell\n                                                            padding=\"checkbox\"\n                                                            onClick={(e) => {\n                                                                selectTableRow(\n                                                                    row.id\n                                                                );\n                                                            }}\n                                                        >\n                                                            <Checkbox\n                                                                checked={\n                                                                    isItemSelected\n                                                                }\n                                                                inputProps={{\n                                                                    \"aria-labelledby\": labelId,\n                                                                }}\n                                                                onChange={(\n                                                                    e\n                                                                ) => {\n                                                                    selectTableRow(\n                                                                        row.id\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <Avatar\n                                                                alt={row.name}\n                                                                src={row.img}\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell\n                                                            component=\"th\"\n                                                            id={labelId}\n                                                            scope=\"row\"\n                                                            padding=\"none\"\n                                                        >\n                                                            {row.name}\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            {row.id}\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            {row.trips}\n                                                        </TableCell>\n                                                    </TableRow>\n                                                );\n                                            })}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                            />\n                        </>\n                    }\n                />\n            </div>\n        </Content>\n    );\n}\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/CompanyMenu/CompanyMenu.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Orders/Orders.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Profile/Profile.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Company/Metric/Metric.js",[],"/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/pages/Dashboard/Main.js",["170"],"import React, { Component } from \"react\";\nimport RouteWithSubRoutes from \"../../../RouteWithSubRoutes\";\nimport { Switch, withRouter } from \"react-router-dom\";\n\nexport class Main extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    goHome = () => {\n        this.props.history.push(this.props.routes[0].path);\n    };\n\n    componentDidMount() {\n        // redirect to the first available link\n        if (this.props.location.pathname === \"/dashboard\") {\n            this.goHome();\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h1>testing</h1>\n                <Switch>\n                    {this.props.routes.map((route, i) => (\n                        <RouteWithSubRoutes key={i} {...route} />\n                    ))}\n                </Switch>\n            </>\n        );\n    }\n}\n\nexport default withRouter(Main);\n","/home/sundaypriest/Desktop/projects/000.softgap technologies/wissenpos-portal/src/components/layout/Content/Content.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"179","line":9,"column":27,"nodeType":"177","messageId":"178","endLine":9,"endColumn":43},{"ruleId":"175","severity":1,"message":"180","line":14,"column":8,"nodeType":"177","messageId":"178","endLine":14,"endColumn":14},{"ruleId":"175","severity":1,"message":"181","line":17,"column":8,"nodeType":"177","messageId":"178","endLine":17,"endColumn":15},{"ruleId":"175","severity":1,"message":"182","line":23,"column":7,"nodeType":"177","messageId":"178","endLine":23,"endColumn":12},{"ruleId":"175","severity":1,"message":"183","line":39,"column":9,"nodeType":"177","messageId":"178","endLine":39,"endColumn":22},{"ruleId":"175","severity":1,"message":"184","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"185","line":4,"column":25,"nodeType":"177","messageId":"178","endLine":4,"endColumn":35},{"ruleId":"175","severity":1,"message":"186","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":15},{"ruleId":"175","severity":1,"message":"187","line":4,"column":18,"nodeType":"177","messageId":"178","endLine":4,"endColumn":28},{"ruleId":"175","severity":1,"message":"188","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":13},{"ruleId":"175","severity":1,"message":"187","line":4,"column":18,"nodeType":"177","messageId":"178","endLine":4,"endColumn":28},{"ruleId":"175","severity":1,"message":"189","line":3,"column":5,"nodeType":"177","messageId":"178","endLine":3,"endColumn":15},{"ruleId":"175","severity":1,"message":"190","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"191","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"192","line":18,"column":8,"nodeType":"177","messageId":"178","endLine":18,"endColumn":12},{"ruleId":"193","severity":1,"message":"194","line":22,"column":1,"nodeType":"195","endLine":41,"endColumn":3},{"ruleId":"196","severity":1,"message":"197","line":22,"column":13,"nodeType":"198","messageId":"199","endLine":22,"endColumn":15},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"200","severity":1,"message":"201","line":8,"column":8,"nodeType":"177","messageId":"178","endLine":8,"endColumn":16},{"ruleId":"175","severity":1,"message":"184","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"202","line":3,"column":10,"nodeType":"177","messageId":"178","endLine":3,"endColumn":13},{"ruleId":"175","severity":1,"message":"203","line":11,"column":10,"nodeType":"177","messageId":"178","endLine":11,"endColumn":17},{"ruleId":"204","severity":1,"message":"205","line":6,"column":5,"nodeType":"206","messageId":"207","endLine":8,"endColumn":6},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'MuiThemeProvider' is defined but never used.","'Navbar' is defined but never used.","'Landing' is defined but never used.","'theme' is assigned a value but never used.","'authenticated' is assigned a value but never used.","'useState' is defined but never used.","'withRouter' is defined but never used.","'Appicon' is defined but never used.","'RouterLink' is defined but never used.","'axios' is defined but never used.","'LOADING_UI' is defined but never used.","'React' is defined but never used.","'useEffect' is defined but never used.","'Icon' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'HomeIcon' is defined but never used.","'add' is defined but never used.","'lighten' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]